Spring self implement the user id and password for the api endpoint just by importing the package of spring starter
security NOTE this is the form based authentication


BASIC AUTH
Specify username and password in the request header AS BASIC 64, server matches with the known password and resend the status
Cannot logout, Need to send username and password for every request
//Following below is the code that is deprecated for newer migration refer https://docs.spring.io/spring-security/reference/5.8/migration/servlet/config.html

@Configuration
@EnableWebSecurity
public class ApplicationSecurityConfing extends WebSecurityConfigurerAdapter{

@Override
protected void configure (HttpSecurity http) throws Exception{
http
.authorizeRequests()
.antMatchers("/","index","/css/*","/js/")  //This white list the files mentioned so no need for uid and password to access these files
.anyRequest()
.authenticated()
.and()
.httpBasic();
}
}


ROLES and Permission
Roles is the higher level view, within roles there are permission

In below snippet the api/... would only be accessed by the users who have their role set as student.
 .authorizeHttpRequests((authorize) -> authorize
                        .requestMatchers("/","index","/css/*","/js*").permitAll()
                        .requestMatchers("/api/**")
                        .hasRole(ApplicationUserRole.STUDENT.name())

                        .anyRequest()
                        .authenticated()
                )


 ------------Disabling the csrf----------------
 By default for role based and general put,post and delete is marked 403 status even with correct basic auth
 The reason is for security purpose to disable not recommended   .csrf(csrf -> csrf.disable());

 ------------------For Allowing Specific Http request by permission----------------
  .requestMatchers(HttpMethod.DELETE,"/management/**").hasAuthority(ApplicationUserPermission.COURSE_WRITE.name())
                         .requestMatchers(HttpMethod.PUT,"/management/**").hasAuthority(ApplicationUserPermission.COURSE_WRITE.name())
                         .requestMatchers(HttpMethod.POST,"/management/**").hasAuthority(ApplicationUserPermission.COURSE_WRITE.name())

 --------------------Allowing has any role for that particular api-------------------------
    .requestMatchers(HttpMethod.GET,"/management/**").hasAnyRole(ApplicationUserRole.ADMINTRAINEE.name(),ApplicationUserRole.ADMIN.name())


REMEMBER THAT THE requestMatchers order matters